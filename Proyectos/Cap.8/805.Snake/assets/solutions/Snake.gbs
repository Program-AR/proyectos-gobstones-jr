procedure AlargarLaCabezaAl(dirección) {
  ExtenderElTroncoAl(dirección)
  if (puedeMover(dirección)) {
    Mover(dirección)
  } else {
    BOOM("La víbora se cayó del tablero")
  }
  if (not(hayVíbora())) {
    PonerLaCabezaMirandoAl(dirección)
  } else {
    BOOM("La víbora chocó consigo misma")
  }
}

procedure ExtenderElTroncoAl(dirección) {
  CodificarSegmento(dirección, códigoDeAnterior())
}

procedure PonerLaCabezaMirandoAl(dirección) {
  CodificarSegmento(opuesto(dirección), códigoDePosterior())
}

procedure CodificarSegmento(direcciónACodificar, color) {
  if (hayBolitas(color)) {
    BOOM("No puedo codificar un segmento aquí porque ya hay uno")
  }
  if (direcciónACodificar == Norte) {
    Poner__Veces(color, 1)
  }
  if (direcciónACodificar == Este) {
    Poner__Veces(color, 2)
  }
  if (direcciónACodificar == Sur) {
    Poner__Veces(color, 3)
  }
  if (direcciónACodificar == Oeste) {
    Poner__Veces(color, 4)
  }
}

function direcciónCodificada(color) {
  if (nroBolitas(color) == 0) {
    BOOM("No hay un segmento en esta posición")
  }
  if (nroBolitas(color) > 4) {
    BOOM("No estoy en un tablero válido")
  }
  if (nroBolitas(color) == 1) {
    valorARetornar := Norte
  }
  if (nroBolitas(color) == 2) {
    valorARetornar := Este
  }
  if (nroBolitas(color) == 3) {
    valorARetornar := Sur
  }
  if (nroBolitas(color) == 4) {
    valorARetornar := Oeste
  }
  return (valorARetornar)
}

procedure AcortarLaVíbora() {
  IrDeLaCabezaALaCola()
  AcortarLaCola()
  IrDeLaColaALaCabeza()
}

procedure MoverLaVíboraAl(dirección) {
  AlargarLaCabezaAl(dirección)
  if (hayManzana()) {
    SacarManzana()
  } else {
    AcortarLaVíbora()
  }
}

procedure IrDeLaCabezaALaCola() {
  while (not (hayCola())) {
    Mover(direcciónDelSegmentoPosterior())
  }
}

procedure IrDeLaColaALaCabeza() {
  while (not (hayCabeza())) {
    Mover(direcciónDelSegmentoAnterior())
  }
}

procedure MoverLaVíbora() {
  MoverLaVíboraAl(direcciónDelÚltimoMovimiento())
}

procedure AcortarLaCola() {
  direcciónSiguiente := direcciónDelSegmentoAnterior()
  SacarTodas_(códigoDeAnterior())
  Mover(direcciónSiguiente)
  SacarTodas_(códigoDePosterior())
}

procedure SacarManzana() {
  Sacar(códigoDeManzana())
}

function hayManzana() {
  return (nroBolitas(códigoDeManzana()) == 1)
}

function códigoDeManzana() {
  return (Rojo)
}

function direcciónDelÚltimoMovimiento() {
  return (opuesto(direcciónDelSegmentoPosterior()))
}

function códigoDeAnterior() {
  return (Negro)
}

function hayVíbora() {
  return (hayBolitas(códigoDeAnterior()) || hayBolitas(códigoDePosterior()))
}

function códigoDePosterior() {
  return (Verde)
}

function direcciónDelSegmentoPosterior() {
  if (nroBolitas(códigoDePosterior()) == 0) {
    BOOM("La cola no tiene posterior")
  }
  if (nroBolitas(códigoDePosterior()) > 4) {
    BOOM("No estoy en un tablero válido")
  }
  return (direcciónCodificada(códigoDePosterior()))
}

function hayCola() {
  return (hayBolitas(códigoDeAnterior()) && not(hayBolitas(códigoDePosterior())))
}

function hayCabeza() {
  return (not(hayBolitas(códigoDeAnterior())) && hayBolitas(códigoDePosterior()))
}

function direcciónDelSegmentoAnterior() {
  if (nroBolitas(códigoDeAnterior()) == 0) {
    BOOM("La cabeza no tiene anterior")
  }
  if (nroBolitas(códigoDeAnterior()) > 4) {
    BOOM("No estoy en un tablero válido")
  }
  return (direcciónCodificada(códigoDeAnterior()))
}


interactive program {
  K_ARROW_LEFT -> {
    MoverLaVíboraAl(Oeste)
  }
  K_ARROW_RIGHT -> {
    MoverLaVíboraAl(Este)
  }
  K_ARROW_UP -> {
    MoverLaVíboraAl(Norte)
  }
  K_ARROW_DOWN -> {
    MoverLaVíboraAl(Sur)
  }
  TIMEOUT(500) -> {
  MoverLaVíbora()
  }
}
