interactive program {
    K_ARROW_LEFT  -> { MoverLaVíbora(Oeste)     }
    K_ARROW_RIGHT -> { MoverLaVíbora(Este)      }
    K_ARROW_UP    -> { MoverLaVíbora(Norte)     }
    K_ARROW_DOWN  -> { MoverLaVíbora(Sur)       }
    TIMEOUT(500)  -> { SeguirMoviendoLaVíbora() }
}

procedure SeguirMoviendoLaVíbora() { MoverLaVíbora(direcciónDelÚltimoMovimiento()) }

procedure MoverLaVíbora(direcciónDeMovimiento) {
  AlargarLaCabeza(direcciónDeMovimiento)
  if (hayManzana())
       { SacarManzana() }
  else { AcortarLaVíbora() }
}

procedure AlargarLaCabeza(dirección) {
  ExtenderTroncoHaciaAdelante(dirección)
  if (not puedeMover(dirección)) { BOOM("Me caí del tablero") }
  Mover(dirección)
  if (hayVibora()) { BOOM("Choqué conmigo misma") }
  PonerCabeza(dirección)
}

procedure SacarManzana() { Sacar(códigoDeManzana()) }

procedure AcortarLaVíbora() {
  IrDeLaCabezaALaCola()
  AcortarLaCola()
  IrDeLaColaALaCabeza()
}

procedure AcortarLaCola() {
  direcciónSiguiente := direcciónDelSegmentoAnterior()
  SacarTodas_(códigoDeAnterior())
  Mover(direcciónSiguiente)
  SacarTodas_(códigoDePosterior())
}

procedure IrDeLaCabezaALaCola()
  { while (not hayCola())   { Mover(direcciónDelSegmentoPosterior()) } }

procedure IrDeLaColaALaCabeza()
  { while (not hayCabeza()) { Mover(direcciónDelSegmentoAnterior()) } }

// --------------------------
procedure ExtenderTroncoHaciaAdelante(direcciónAExtender) 
  { CodificarSegmento(direcciónAExtender, códigoDeAnterior()) }
  
procedure PonerCabeza(direcciónAApuntar) {
  // CodificarSegmento(opuesto(direcciónAApuntar), códigoDePosterior()) 
  //
  // CODIGO TEMPORARIO, POR ERROR EN OPUESTO
  //
  CodificarSegmento(opuesto_(direcciónAApuntar), códigoDePosterior()) 
}

function hayVibora() 
  { return (hayBolitas(códigoDeAnterior()) 
         || hayBolitas(códigoDePosterior())) }

function hayCola() 
  { return (hayBolitas(códigoDeAnterior()) 
         && not hayBolitas(códigoDePosterior())) }

function hayCabeza()
  { return (not hayBolitas(códigoDeAnterior()) 
         && hayBolitas(códigoDePosterior())) }

function hayManzana()
  { return (nroBolitas(códigoDeManzana()) == 1) }

function códigoDeManzana()   { return (Rojo)  }
function códigoDeAnterior()  { return (Negro) }
function códigoDePosterior() { return (Verde) }
  
  
// -----------------------------
// Operaciones pre definidas
// -----------------------------
procedure CodificarSegmento(direcciónACodificar, color) {
    if (hayBolitas(color)) { BOOM("No puedo codificar un segmento acá porque ya hay uno") }
    if (direcciónACodificar == Norte) { Poner__Veces(color, 1) }
    if (direcciónACodificar == Este)  { Poner__Veces(color, 2) }
    if (direcciónACodificar == Sur)   { Poner__Veces(color, 3) }
    if (direcciónACodificar == Oeste) { Poner__Veces(color, 4) }
}

function direcciónDelÚltimoMovimiento() {
  // return (opuesto(direcciónDelSegmentoPosterior())) 
  //
  // CODIGO TEMPORARIO, POR ERROR EN OPUESTO
  //
  return (opuesto_(direcciónDelSegmentoPosterior())) 
}
  
function direcciónDelSegmentoAnterior()    { 
  if (nroBolitas(códigoDeAnterior()) == 0) { BOOM("La cabeza no tiene previo") }
  if (nroBolitas(códigoDeAnterior()) > 4)  { BOOM("No estoy en un tablero válido") }
  return (direcciónCodificada(códigoDeAnterior())) 
}

function direcciónDelSegmentoPosterior() { 
  if (nroBolitas(códigoDePosterior()) == 0) { BOOM("La cola no tiene posterior") }
  if (nroBolitas(códigoDePosterior()) > 4)  { BOOM("No estoy en un tablero válido") }
  return (direcciónCodificada(códigoDePosterior())) 
}

function direcciónCodificada(color) {
  if (nroBolitas(color) == 0) { BOOM("No hay un segmento en esta posición") }
  if (nroBolitas(color) >  4) { BOOM("No estoy en un tablero válido") }
  if (nroBolitas(color) == 1) { valorARetornar := Norte }
  if (nroBolitas(color) == 2) { valorARetornar := Este  }
  if (nroBolitas(color) == 3) { valorARetornar := Sur   }
  if (nroBolitas(color) == 4) { valorARetornar := Oeste }
  return (valorARetornar)
}
